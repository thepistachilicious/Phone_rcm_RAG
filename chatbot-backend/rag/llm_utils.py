# rag/llm_utils.py
import os
import json
from dotenv import load_dotenv
import google.generativeai as genai
import re

load_dotenv()
gemini_api_key = os.getenv("GEMINI_API_KEY")
genai.configure(api_key=gemini_api_key)


def analyze_query_with_gemini(query: str, history_context: str) -> dict:
    prompt = f"""
    L·ªãch s·ª≠ h·ªôi tho·∫°i:
    {history_context}

    C√¢u h·ªèi m·ªõi: "{query}"

    Tr·∫£ l·ªùi theo ƒë√∫ng ƒë·ªãnh d·∫°ng JSON sau:
    {{
        "is_greeting": "True ho·∫∑c r·ªóng",
      "is_ambiguous": "True ho·∫∑c r·ªóng",
      "is_duplicate": "True ho·∫∑c r·ªóng",
      "answered": "n·ªôi dung c√¢u tr·∫£ l·ªùi ho·∫∑c r·ªóng",
      "new_query": "c√¢u h·ªèi r√µ r√†ng ho·∫∑c r·ªóng",
      "retrieval_target": "Phone_info/Laptop_info ho·∫∑c r·ªóng n·∫øu kh√¥ng r√µ"
    }}
    
    Ph√¢n t√≠ch:
    1. N·∫øu c√¢u h·ªèi l√† l·ªùi ch√†o x√£ giao (v√≠ d·ª•: xin ch√†o, b·∫°n kh·ªèe kh√¥ng, b·∫°n l√† ai, c·∫£m ∆°n nh√©, t·∫°m bi·ªát, h·∫πn g·∫∑p l·∫°i...), kh√¥ng li√™n quan t·ªõi th√¥ng tin ƒëi·ªán tho·∫°i ho·∫∑c laptop th√¨ "is_greeting" l√† True.
    2. N·∫øu is_greeting l√† True th√¨ m·ª•c "answered" n√™n l√† c√¢u ph·∫£n h·ªìi l·ªãch s·ª±, v√≠ d·ª•: "Ch√†o b·∫°n, t√¥i c√≥ th·ªÉ gi√∫p g√¨ v·ªÅ ƒëi·ªán tho·∫°i ho·∫∑c laptop?".
    4. N·∫øu c√¢u h·ªèi m∆° h·ªì (th∆∞·ªùng ch·ª©a c√°c t·ª´: n√≥, ·∫•y, ƒë√≥, kia, c√°i n√†o, nh∆∞ tr√™n, ƒë√£ ƒë·ªÅ c·∫≠p,...) do ph·ª• thu·ªôc ng·ªØ c·∫£nh th√¨ "is_ambiguous" l√† True.
    5. N·∫øu c√≥ th·ªÉ vi·∫øt l·∫°i c√¢u h·ªèi r√µ r√†ng h∆°n t·ª´ ng·ªØ c·∫£nh th√¨ ƒëi·ªÅn v√†o "new_query", c√≤n kh√¥ng th√¨ gi·ªØ nguy√™n, kh√¥ng ƒë∆∞·ª£c th√™m th√¥ng tin m·ªõi.
    6. N·∫øu c√¢u h·ªèi ƒë√£ t·ª´ng ƒë∆∞·ª£c h·ªèi v√† ƒë∆∞·ª£c tr·∫£ l·ªùi trong l·ªãch s·ª≠ th√¨ "is_duplicate" l√† True v√† "answered" l√† c√¢u tr·∫£ l·ªùi tr√≠ch t·ª´ l·ªãch s·ª≠; ng∆∞·ª£c l·∫°i "is_duplicate" l√† "" v√† "answered" l√† ""
    7. Truy v·∫•n n√†y li√™n quan ƒë·∫øn ch·ªß ƒë·ªÅ n√†o ƒëi·ªán tho·∫°i hay laptop: "Phone_info", "Laptop_info", ""? (retrieval_target)
    """

    try:
        model = genai.GenerativeModel("models/gemini-1.5-flash")
        response = model.generate_content(prompt)
        raw_text = response.text.strip()
        cleaned_response = re.sub(r"^```json|```$", "", raw_text.strip(), flags=re.MULTILINE).strip()

        print("üéØ Ph·∫£n h·ªìi t·ª´ Gemini:", cleaned_response)
        try:
            result = json.loads(cleaned_response)
        except json.JSONDecodeError as json_err:
            print("L·ªói ph√¢n t√≠ch JSON:", json_err)
            raise ValueError("Ph·∫£n h·ªìi kh√¥ng ·ªü ƒë·ªãnh d·∫°ng JSON h·ª£p l·ªá.")
    except Exception as e:
        print("L·ªói khi ph√¢n t√≠ch ph·∫£n h·ªìi t·ª´ Gemini:", e)
        result = {
            "is_ambiguous": False,
            "is_duplicate": False,
            "answered": "",
            "new_query": query,
            "retrieval_target": ""
        }

    return result

